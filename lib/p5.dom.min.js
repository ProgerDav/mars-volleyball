/**
 *
 * @module p5.dom
 * @submodule p5.dom
 * @for p5.dom
 * @main
 */

!function (t, e) { "function" == typeof define && define.amd ? define("p5.dom", ["p5"], function (t) { e(t) }) : "object" == typeof exports ? e(require("../p5")) : e(t.p5) }(this, function (t) { function e(e) { return "VIDEO" === e.tagName || "AUDIO" === e.tagName ? new t.MediaElement(e) : new t.Element(e) } function i(e, i, n) { (i._userNode ? i._userNode : document.body).appendChild(e); var o = n ? new t.MediaElement(e) : new t.Element(e); return i._elements.push(o), o } t.prototype.getElement = function (t) { var i = document.getElementById(t); return i ? e(i) : null }, t.prototype.getElements = function (t) { var i = [], n = document.getElementsByClassName(t); if (n) for (var o = 0; o < n.length; o++) { var r = e(n[o]); i.push(r) } return i }, t.prototype.removeElements = function (t) { for (var e = 0; e < this._elements.length; e++)this._elements[e].elt instanceof HTMLCanvasElement || this._elements[e].remove() }; function n(t, e, n, o) { var r = document.createElement(e); "string" == typeof n && (n = [n]); for (var s = 0; s < n.length; s++) { var a = document.createElement("source"); a.src = n[s], r.appendChild(a) } void 0 !== o && r.addEventListener("canplaythrough", function () { o() }); var l = i(r, t, !0); return l.loadedmetadata = !1, r.addEventListener("loadedmetadata", function () { l.width = r.videoWidth, l.height = r.videoHeight, l.loadedmetadata = !0 }), l } ["div", "p", "span"].forEach(function (e) { var n = "create" + e.charAt(0).toUpperCase() + e.slice(1); t.prototype[n] = function (t) { var n = document.createElement(e); return n.innerHTML = void 0 === typeof t ? "" : t, i(n, this) } }), t.prototype.createImg = function (t, e) { var n = document.createElement("img"); return n.src = t, void 0 !== e && (n.alt = e), i(n, this) }, t.prototype.createA = function (t, e, n) { var o = document.createElement("a"); return o.href = t, o.innerHTML = e, n && (o.target = n), i(o, this) }, t.prototype.createSlider = function (t, e, n, o) { var r = document.createElement("input"); return r.type = "range", r.min = t, r.max = e, o && (r.step = o), n && (r.value = n), i(r, this) }, t.prototype.createButton = function (t, e) { var n = document.createElement("button"); return n.innerHTML = t, n.value = e, e && (n.value = e), i(n, this) }, t.prototype.createInput = function (t) { var e = document.createElement("input"); return e.type = "text", t && (e.value = t), i(e, this) }, t.prototype.createFileInput = function (e, n) { if (window.File && window.FileReader && window.FileList && window.Blob) { var o = document.createElement("input"); return o.type = "file", n && (o.multiple = "multiple"), o.addEventListener("change", function (i) { for (var n = i.target.files, o = 0; o < n.length; o++) { var r = n[o], s = new FileReader; function a(i) { var n = new t.File(i); return function (t) { n.data = t.target.result, e(n) } } s.onload = a(r), "text" === r.type ? s.readAsText(r) : s.readAsDataURL(r) } }, !1), i(o, this) } console.log("The File APIs are not fully supported in this browser. Cannot create element.") }, t.prototype.createVideo = function (t, e) { return n(this, "video", t, e) }, t.prototype.createAudio = function (t, e) { return n(this, "audio", t, e) }, t.prototype.VIDEO = "video", t.prototype.AUDIO = "audio", navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia, t.prototype.createCapture = function () { for (var e, n, o = !0, r = !0, s = 0; s < arguments.length; s++)arguments[s] === t.prototype.VIDEO ? r = !1 : arguments[s] === t.prototype.AUDIO ? o = !1 : "object" == typeof arguments[s] ? e = arguments[s] : "function" == typeof arguments[s] && (n = arguments[s]); if (!navigator.getUserMedia) throw "getUserMedia not supported in this browser"; var a = document.createElement("video"); e || (e = { video: o, audio: r }), navigator.getUserMedia(e, function (t) { a.src = window.URL.createObjectURL(t), a.play(), n && n(t) }, function (t) { console.log(t) }); var l = i(a, this, !0); return l.loadedmetadata = !1, a.addEventListener("loadedmetadata", function () { l.width = a.videoWidth, l.height = a.videoHeight, l.loadedmetadata = !0 }), l }, t.prototype.createElement = function (t, e) { var n = document.createElement(t); return void 0 !== e && (n.innerHTML = e), i(n, this) }, t.Element.prototype.addClass = function (t) { return this.elt.className ? this.elt.className = this.elt.className + " " + t : this.elt.className = t, this }, t.Element.prototype.removeClass = function (t) { var e = new RegExp("(?:^|\\s)" + t + "(?!\\S)"); return this.elt.className = this.elt.className.replace(e, ""), this.elt.className = this.elt.className.replace(/^\s+|\s+$/g, ""), this }, t.Element.prototype.child = function (e) { return "string" == typeof e ? e = document.getElementById(e) : e instanceof t.Element && (e = e.elt), this.elt.appendChild(e), this }, t.Element.prototype.html = function (t) { return void 0 !== t ? (this.elt.innerHTML = t, this) : this.elt.innerHTML }, t.Element.prototype.position = function (t, e) { return this.elt.style.position = "absolute", this.elt.style.left = t + "px", this.elt.style.top = e + "px", this }, t.Element.prototype.style = function (t, e) { if (void 0 === e) for (var i = t.split(";"), n = 0; n < i.length; n++) { var o = i[n].split(":"); o[0] && o[1] && (this.elt.style[o[0].trim()] = o[1].trim()) } else this.elt.style[t] = e; return this }, t.Element.prototype.attribute = function (t, e) { return void 0 === e ? this.elt.getAttribute(t) : (this.elt.setAttribute(t, e), this) }, t.Element.prototype.value = function () { return arguments.length > 0 ? (this.elt.value = arguments[0], this) : "range" === this.elt.type ? parseFloat(this.elt.value) : this.elt.value }, t.Element.prototype.show = function () { return this.elt.style.display = "block", this }, t.Element.prototype.hide = function () { return this.elt.style.display = "none", this }, t.Element.prototype.size = function (e, i) { var n = e, o = i, r = t.prototype.AUTO; if (n !== r || o !== r) { if (n === r ? n = i * this.width / this.height : o === r && (o = e * this.height / this.width), this.elt instanceof HTMLCanvasElement) { var s = {}, a = this.elt.getContext("2d"); for (var l in a) s[l] = a[l]; for (var l in this.elt.setAttribute("width", n * this._pInst._pixelDensity), this.elt.setAttribute("height", o * this._pInst._pixelDensity), this.elt.setAttribute("style", "width:" + n + "px !important; height:" + o + "px !important;"), this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), s) this.elt.getContext("2d")[l] = s[l] } else this.elt.style.width = n + "px !important", this.elt.style.height = o + "px !important", this.elt.width = n, this.elt.height = o; this.elt.style.overflow = "hidden", this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight, this._pInst && this._pInst._curElement.elt === this.elt && (this._pInst._setProperty("width", this.elt.offsetWidth), this._pInst._setProperty("height", this.elt.offsetHeight)) } return this }, t.Element.prototype.remove = function () { for (var t in this._events) this.elt.removeEventListener(t, this._events[t]); this.elt.parentNode && this.elt.parentNode.removeChild(this.elt) }, t.MediaElement = function (e, i) { t.Element.call(this, e, i) }, t.MediaElement.prototype = Object.create(t.Element.prototype), t.MediaElement.prototype.play = function () { return this.elt.currentTime === this.elt.duration && (this.elt.currentTime = 0), this.elt.play(), this }, t.MediaElement.prototype.stop = function () { return this.elt.pause(), this.elt.currentTime = 0, this }, t.MediaElement.prototype.pause = function () { return this.elt.pause(), this }, t.MediaElement.prototype.loop = function () { return this.elt.setAttribute("loop", !0), this.play(), this }, t.MediaElement.prototype.noLoop = function () { return this.elt.setAttribute("loop", !1), this }, t.MediaElement.prototype.autoplay = function (t) { return this.elt.setAttribute("autoplay", t), this }, t.MediaElement.prototype.volume = function (t) { if (void 0 === t) return this.elt.volume; this.elt.volume = t }, t.MediaElement.prototype.time = function (t) { if (void 0 === t) return this.elt.currentTime; this.elt.currentTime = t }, t.MediaElement.prototype.duration = function () { return this.elt.duration }, t.MediaElement.prototype.pixels = [], t.MediaElement.prototype.loadPixels = function () { return this.loadedmetadata && (this.canvas || (this.canvas = document.createElement("canvas"), this.canvas.width = this.width, this.canvas.height = this.height, this.drawingContext = this.canvas.getContext("2d")), this.drawingContext.drawImage(this.elt, 0, 0, this.width, this.height), t.prototype.loadPixels.call(this)), this }, t.MediaElement.prototype.updatePixels = function (e, i, n, o) { return this.loadedmetadata && t.prototype.updatePixels.call(this, e, i, n, o), this }, t.MediaElement.prototype.get = function (e, i, n, o) { return this.loadedmetadata ? t.prototype.get.call(this, e, i, n, o) : [0, 0, 0, 255] }, t.MediaElement.prototype.set = function (e, i, n) { this.loadedmetadata && t.prototype.set.call(this, e, i, n) } });
