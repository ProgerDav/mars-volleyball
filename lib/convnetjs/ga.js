!function (t) { "use strict"; convnetjs.Vol; var e = convnetjs.randf, s = convnetjs.randn, n = convnetjs.randi, i = convnetjs.zeros; convnetjs.Net, convnetjs.maxmin, convnetjs.randperm, convnetjs.weightedSample, convnetjs.getopt, convnetjs.arrUnique; function o(t, e) { if (!t) { if (e = e || "Assertion failed", "undefined" != typeof Error) throw new Error(e); throw e } } var r = function (t) { this.fitness = 0, this.nTrial = 0, this.gene = t }; function h(t) { var e, s, n = null, i = null, o = null, r = 0; for (e = 0; e < t.layers.length; e++) { if (i = (n = t.layers[e]).filters) for (s = 0; s < i.length; s++)r += i[s].w.length; (o = n.biases) && (r += o.w.length) } return r } function a(t, e) { var s, n, i, o = 0, r = null, h = null, a = null, u = null; for (s = 0; s < t.layers.length; s++) { if (h = (r = t.layers[s]).filters) for (n = 0; n < h.length; n++)for (u = h[n].w, i = 0; i < u.length; i++)u[i] = e[o++]; if (a = r.biases) for (u = a.w, i = 0; i < u.length; i++)u[i] = e[o++] } } function u(t) { var e, s, n, i = [], o = null, r = null, h = null, a = null; for (e = 0; e < t.layers.length; e++) { if (r = (o = t.layers[e]).filters) for (s = 0; s < r.length; s++)for (a = r[s].w, n = 0; n < a.length; n++)i.push(a[n]); if (h = o.biases) for (a = h.w, n = 0; n < a.length; n++)i.push(a[n]) } return i } function f(t) { for (var e = t.length, s = i(e), n = 0; n < e; n++)s[n] = t[n]; return s } r.prototype = { burst_mutate: function (t) { var e, n, i = t || .1; for (n = this.gene.length, e = 0; e < n; e++)this.gene[e] += s(0, i) }, randomize: function (t) { var e, n, i = t || .1; for (n = this.gene.length, e = 0; e < n; e++)this.gene[e] = s(0, i) }, mutate: function (t, n) { var i, o, r = t || .1, h = n || .1; for (o = this.gene.length, i = 0; i < o; i++)e(0, 1) < r && (this.gene[i] += s(0, h)) }, crossover: function (t, e, s) { var i, o; o = this.gene.length; var r = n(0, o); for (i = 0; i < o; i++)i < r ? (e.gene[i] = this.gene[i], s.gene[i] = t.gene[i]) : (e.gene[i] = t.gene[i], s.gene[i] = this.gene[i]) }, copyFrom: function (t) { this.copyFromGene(t.gene) }, copyFromGene: function (t) { var e, s; for (s = this.gene.length, e = 0; e < s; e++)this.gene[e] = t[e] }, clone: function () { var t, e = i(this.gene.length); for (t = 0; t < this.gene.length; t++)e[t] = Math.round(1e4 * this.gene[t]) / 1e4; var s = new r(e); return s.fitness = this.fitness, s }, pushToNetwork: function (t) { a(t, this.gene) } }; var p = function (t, e, s) { this.net = t; var n = e || {}; this.population_size = void 0 !== n.population_size ? n.population_size : 100, this.population_size = 2 * Math.floor(this.population_size / 2), this.mutation_rate = void 0 !== n.mutation_rate ? n.mutation_rate : .01, this.elite_percentage = void 0 !== n.elite_percentage ? n.elite_percentage : .2, this.mutation_size = void 0 !== n.mutation_size ? n.mutation_size : .05, this.target_fitness = void 0 !== n.target_fitness ? n.target_fitness : 1e16, this.burst_generations = void 0 !== n.burst_generations ? n.burst_generations : 10, this.best_trial = void 0 !== n.best_trial ? n.best_trial : 1, this.num_match = void 0 !== n.num_match ? n.num_match : 1, this.chromosome_size = h(this.net); var o = null; s && (o = new r(s)), this.chromosomes = []; for (var u = 0; u < this.population_size; u++) { var f = new r(i(this.chromosome_size)); o ? (f.copyFrom(o), u > 0 && f.burst_mutate(this.mutation_size)) : f.randomize(1), this.chromosomes.push(f) } a(this.net, this.chromosomes[0].gene), this.bestFitness = -1e16, this.bestFitnessCount = 0 }; p.prototype = { train: function (t) { var e, s, i, o = function (e, s) { for (var n, i = -1e16, o = 0; o < e; o++)(n = t(s)) > i && (i = n); return i }, r = this.chromosomes; s = this.population_size; var h = -1e16; if (a(this.net, r[0].gene), i = o(this.best_trial, this.net), r[0].fitness = i, (h = i) > this.target_fitness) return h; for (e = 1; e < s; e++)a(this.net, r[e].gene), i = o(this.best_trial, this.net), r[e].fitness = i, i > h && (h = i); r = r.sort(function (t, e) { return t.fitness > e.fitness ? -1 : t.fitness < e.fitness ? 1 : 0 }); var u = 2 * Math.floor(Math.floor(this.elite_percentage * s) / 2); for (e = u; e < s; e += 2) { var f = n(0, u), p = n(0, u); r[f].crossover(r[p], r[e], r[e + 1]) } for (e = 1; e < s; e++)r[e].mutate(this.mutation_rate, this.mutation_size); if (a(this.net, r[0].gene), h < this.bestFitness) { if (this.bestFitnessCount++ , this.bestFitnessCount > this.burst_generations) for (e = 1; e < s; e++)r[e].copyFrom(r[0]), r[e].burst_mutate(this.mutation_size) } else this.bestFitnessCount = 0, this.bestFitness = h; return h }, matchTrain: function (t) { var e, s, i, o, r = this.chromosomes, h = 0; for (i = this.population_size, e = 0; e < i; e++)r[e].fitness = 0, r[e].nTrial = 0; for (e = 0; e < i; e++)for (s = 0; s < this.num_match; s++)(o = n(0, i)) !== e && (h = t(r[e], r[o]), r[e].nTrial += 1, r[o].nTrial += 1, r[e].fitness += h + 1, r[o].fitness += 1 - h); for (e = 0; e < i; e++)r[e].nTrial > 0 && (r[e].fitness /= r[e].nTrial); r = r.sort(function (t, e) { return t.fitness > e.fitness ? -1 : t.fitness < e.fitness ? 1 : 0 }); var u = 2 * Math.floor(Math.floor(this.elite_percentage * i) / 2); for (e = u; e < i; e += 2) { var f = n(0, u), p = n(0, u); r[f].crossover(r[p], r[e], r[e + 1]) } for (e = 2; e < i; e++)r[e].mutate(this.mutation_rate, this.mutation_size); a(this.net, r[0].gene) } }; var l = function (t, e, s, n) { this.net = [], this.Ninput = e, this.Nsp = t, this.Nhidden = s, this.input = new convnetjs.Vol(1, 1, t + e), this.output = i(t); var o, r = []; r.push({ type: "input", out_sx: 1, out_sy: 1, out_depth: e + t }), r.push({ type: "fc", num_neurons: s, activation: "sigmoid" }), r.push({ type: "regression", num_neurons: 1 }); for (var h = 0; h < t; h++)(o = new convnetjs.Net).makeLayers(r), this.net.push(o); n && this.pushGenes(n) }; l.prototype = { feedback: function () { var t, e = this.Ninput, s = this.Nsp; for (t = 0; t < s; t++)this.input.w[t + e] = this.output[t] }, setInput: function (t) { var e, s = this.Ninput; this.Nsp; for (e = 0; e < s; e++)this.input.w[e] = t[e]; this.feedback() }, forward: function () { this.Ninput; var t, e, s = this.Nsp, n = i(s); for (t = s - 1; t >= 0; t--)0 === t && this.feedback(), e = this.net[t].forward(this.input), n[t] = e.w[0], this.output[t] = n[t]; return n }, getNetworkSize: function () { return h(this.net[0]) }, getGenes: function () { var t, e = this.Nsp, s = []; for (t = 0; t < e; t++)s.push(u(this.net[t])); return s }, pushGenes: function (t) { var e, s = this.Nsp; for (e = 0; e < s; e++)a(this.net[e], t[e]) } }; var c = function (t, e, s) { this.espnet = t, this.Nsp = t.Nsp; this.Nsp; var n = e || {}; this.population_size = void 0 !== n.population_size ? n.population_size : 50, this.population_size = 2 * Math.floor(this.population_size / 2), this.mutation_rate = void 0 !== n.mutation_rate ? n.mutation_rate : .2, this.elite_percentage = void 0 !== n.elite_percentage ? n.elite_percentage : .2, this.mutation_size = void 0 !== n.mutation_size ? n.mutation_size : .02, this.target_fitness = void 0 !== n.target_fitness ? n.target_fitness : 1e16, this.num_passes = void 0 !== n.num_passes ? n.num_passes : 2, this.burst_generations = void 0 !== n.burst_generations ? n.burst_generations : 10, this.best_mode = void 0 !== n.best_mode && n.best_mode, this.chromosome_size = this.espnet.getNetworkSize(), this.initialize(s) }; c.prototype = { initialize: function (t) { var e, s, n, h, a, u = this.Nsp; for (this.sp = [], this.bestGenes = [], e = 0; e < u; e++) { for (h = [], s = 0; s < this.population_size; s++)a = new r(i(this.chromosome_size)), t ? (a.copyFromGene(t[e]), s > 0 && a.burst_mutate(this.mutation_size)) : a.randomize(1), h.push(a); n = f(h[0].gene), this.bestGenes.push(n), this.sp.push(h) } o(this.bestGenes.length === u), this.espnet.pushGenes(this.bestGenes), this.bestFitness = -1e16, this.bestFitnessCount = 0 }, train: function (t) { var e, s, i, r, h, a, u, p = this.sp; h = this.population_size, a = this.Nsp; var l, c, g, _ = -1e16; function m(t) { for (var e = [], s = 0; s < t.length; s++)e.push(f(t[s].gene)); return e } function v(t) { for (var e = [], s = 0; s < t.length; s++)e.push(f(t[s])); return e } function b(t, e) { return t.fitness / t.nTrial > e.fitness / e.nTrial ? -1 : t.fitness / t.nTrial < e.fitness / e.nTrial ? 1 : 0 } for (e = 0; e < a; e++)for (s = 0; s < h; s++)this.best_mode ? (p[e][s].nTrial = 1, p[e][s].fitness = -1e16) : (p[e][s].nTrial = 0, p[e][s].fitness = 0); if (o(this.bestGenes.length === a), this.espnet.pushGenes(this.bestGenes), (u = t(this.espnet)) > this.target_fitness) return u; for (l = v(this.bestGenes), _ = u, i = 0; i < this.num_passes; i++)for (e = 0; e < a; e++)for (s = 0; s < h; s++) { for (c = [], r = 0; r < a; r++)r === e ? c.push(p[r][s]) : c.push(p[r][n(0, h)]); for (o((g = m(c)).length === a), this.espnet.pushGenes(g), u = t(this.espnet), r = 0; r < a; r++)this.best_mode ? u > c[r].fitness && (c[r].fitness = u) : (c[r].nTrial += 1, c[r].fitness += u); u > _ && (_ = u, c, l = g) } for (e = 0; e < a; e++)p[e] = p[e].sort(b); var d = 2 * Math.floor(Math.floor(this.elite_percentage * h) / 2); for (e = 0; e < a; e++)for (s = d; s < h; s += 2) { var z = n(0, d), w = n(0, d); p[e][z].crossover(p[e][w], p[e][s], p[e][s + 1]) } for (e = 0; e < a; e++)for (s = 2 * d; s < h; s++)p[e][s].mutate(this.mutation_rate, this.mutation_size); for (e = 0; e < a; e++)p[e][h - 1].copyFromGene(this.bestGenes[e]), p[e][h - 2].copyFromGene(l[e]); if (_ < this.bestFitness) { if (this.bestFitnessCount++ , this.bestFitnessCount > this.burst_generations) { console.log("stagnating. burst mutate based on best solution."); var G = v(this.bestGenes); this.bestFitness; this.initialize(G), this.bestGenes = G, this.bestFitness = this.bestFitnessCopy } } else this.bestFitnessCount = 0, this.bestFitness = _, this.bestGenes = l; return o(this.bestGenes.length === a), this.espnet.pushGenes(this.bestGenes), _ } }, convnetjs.ESPNet = l, convnetjs.ESPTrainer = c, convnetjs.GATrainer = p, convnetjs.Chromosome = r, convnetjs.randomizeNetwork = function (t) { var e = h(t), s = new r(i(e)); s.randomize(1), a(t, s.gene) } }(convnetjs);